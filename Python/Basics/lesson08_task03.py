# Урок № 8, задача № 3:
# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NotNumError(Exception):

    def __init__(self, text):
        self.text = text


user_list = []
check_list = []
count = -1


while True:
    user_input = input('Цифры попадают в список, любые другие буквы или символы вызовут ошибку. Для завершения работы введите "quit". Введите данные: ')
    if user_input.upper() == 'QUIT':
        print('Ваш список: ', user_list)
        print('Завершение работы.')
        break
    elif user_input == '':
        print('Пустой ввод, повторите попытку:')
    else:
        check_list.append(user_input)
        count += 1
        # print('check_list:', check_list)
        # print('count:', count)
        for i in check_list[count]:
            try:
                if i.isdigit():
                    user_list.append(i)
                    print('Успешно, продолжаем')
                else:
                    raise NotNumError('Введены НЕ цифры. <<<Своя ошибка>>>.')
            except NotNumError:
                print(f'Символ "{i}" не является цифрой. Обработано, продолжаем.')
